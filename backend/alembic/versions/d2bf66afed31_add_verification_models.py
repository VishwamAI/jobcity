"""Add verification models

Revision ID: d2bf66afed31
Revises: 0aba72f95869
Create Date: 2024-11-09 10:44:44.217672

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd2bf66afed31'
down_revision: Union[str, None] = '0aba72f95869'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('identity_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('document_type', sa.String(), nullable=True),
    sa.Column('document_number', sa.String(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('verification_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_identity_documents_id'), 'identity_documents', ['id'], unique=False)
    op.create_table('user_credentials',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('platform', sa.String(), nullable=True),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('encrypted_password', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_credentials_id'), 'user_credentials', ['id'], unique=False)
    op.add_column('document_audit_logs', sa.Column('action_by', sa.String(), nullable=True))
    op.add_column('document_audit_logs', sa.Column('action_data', sa.JSON(), nullable=True))
    op.add_column('document_audit_logs', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.alter_column('document_audit_logs', 'action',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_index(op.f('ix_document_audit_logs_id'), 'document_audit_logs', ['id'], unique=False)
    op.drop_constraint('document_audit_logs_document_id_fkey', 'document_audit_logs', type_='foreignkey')
    op.create_foreign_key(None, 'document_audit_logs', 'identity_documents', ['document_id'], ['id'])
    op.drop_column('document_audit_logs', 'timestamp')
    op.drop_column('document_audit_logs', 'success')
    op.drop_column('document_audit_logs', 'details')
    op.add_column('failed_login_attempts', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('failed_login_attempts', sa.Column('user_agent', sa.String(), nullable=True))
    op.add_column('failed_login_attempts', sa.Column('attempt_time', sa.DateTime(), nullable=True))
    op.alter_column('failed_login_attempts', 'ip_address',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_index(op.f('ix_failed_login_attempts_id'), 'failed_login_attempts', ['id'], unique=False)
    op.create_foreign_key(None, 'failed_login_attempts', 'users', ['user_id'], ['id'])
    op.drop_column('failed_login_attempts', 'username')
    op.drop_column('failed_login_attempts', 'attempt_count')
    op.drop_column('failed_login_attempts', 'is_blocked')
    op.drop_column('failed_login_attempts', 'last_attempt')
    op.drop_column('failed_login_attempts', 'block_expiration')
    op.drop_column('failed_login_attempts', 'first_attempt')
    op.add_column('password_resets', sa.Column('reset_token', sa.String(), nullable=True))
    op.add_column('password_resets', sa.Column('used_at', sa.DateTime(), nullable=True))
    op.add_column('password_resets', sa.Column('ip_address', sa.String(), nullable=True))
    op.add_column('password_resets', sa.Column('user_agent', sa.String(), nullable=True))
    op.alter_column('password_resets', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_constraint('password_resets_token_key', 'password_resets', type_='unique')
    op.create_index(op.f('ix_password_resets_id'), 'password_resets', ['id'], unique=False)
    op.create_index(op.f('ix_password_resets_reset_token'), 'password_resets', ['reset_token'], unique=True)
    op.drop_column('password_resets', 'token')
    op.add_column('security_events', sa.Column('event_data', sa.JSON(), nullable=True))
    op.add_column('security_events', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.alter_column('security_events', 'event_type',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_index(op.f('ix_security_events_id'), 'security_events', ['id'], unique=False)
    op.drop_column('security_events', 'timestamp')
    op.drop_column('security_events', 'severity')
    op.drop_column('security_events', 'success')
    op.drop_column('security_events', 'details')
    op.add_column('user_sessions', sa.Column('session_token', sa.String(), nullable=True))
    op.drop_constraint('user_sessions_session_id_key', 'user_sessions', type_='unique')
    op.create_index(op.f('ix_user_sessions_id'), 'user_sessions', ['id'], unique=False)
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.drop_column('user_sessions', 'refresh_token')
    op.drop_column('user_sessions', 'is_active')
    op.drop_column('user_sessions', 'session_id')
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_username_key', 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.drop_column('users', 'is_verified')
    op.drop_column('users', 'username')
    op.add_column('verification_attempts', sa.Column('document_id', sa.Integer(), nullable=True))
    op.add_column('verification_attempts', sa.Column('attempt_type', sa.String(), nullable=True))
    op.add_column('verification_attempts', sa.Column('status', sa.String(), nullable=True))
    op.add_column('verification_attempts', sa.Column('attempt_data', sa.JSON(), nullable=True))
    op.add_column('verification_attempts', sa.Column('error_message', sa.Text(), nullable=True))
    op.add_column('verification_attempts', sa.Column('user_agent', sa.String(), nullable=True))
    op.add_column('verification_attempts', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.alter_column('verification_attempts', 'ip_address',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_index(op.f('ix_verification_attempts_id'), 'verification_attempts', ['id'], unique=False)
    op.drop_constraint('verification_attempts_user_id_fkey', 'verification_attempts', type_='foreignkey')
    op.create_foreign_key(None, 'verification_attempts', 'identity_documents', ['document_id'], ['id'])
    op.drop_column('verification_attempts', 'attempt_count')
    op.drop_column('verification_attempts', 'is_blocked')
    op.drop_column('verification_attempts', 'last_attempt')
    op.drop_column('verification_attempts', 'user_id')
    op.drop_column('verification_attempts', 'block_expiration')
    op.drop_column('verification_attempts', 'first_attempt')
    op.add_column('verified_documents', sa.Column('document_id', sa.Integer(), nullable=True))
    op.add_column('verified_documents', sa.Column('verification_data', sa.JSON(), nullable=True))
    op.add_column('verified_documents', sa.Column('verified_by', sa.String(), nullable=True))
    op.add_column('verified_documents', sa.Column('verified_at', sa.DateTime(), nullable=True))
    op.add_column('verified_documents', sa.Column('valid_until', sa.DateTime(), nullable=True))
    op.add_column('verified_documents', sa.Column('revocation_reason', sa.String(), nullable=True))
    op.add_column('verified_documents', sa.Column('revoked_at', sa.DateTime(), nullable=True))
    op.create_index(op.f('ix_verified_documents_id'), 'verified_documents', ['id'], unique=False)
    op.drop_constraint('verified_documents_user_id_fkey', 'verified_documents', type_='foreignkey')
    op.create_foreign_key(None, 'verified_documents', 'identity_documents', ['document_id'], ['id'])
    op.drop_column('verified_documents', 'verification_score')
    op.drop_column('verified_documents', 'status')
    op.drop_column('verified_documents', 'created_at')
    op.drop_column('verified_documents', 'encryption_key')
    op.drop_column('verified_documents', 'metadata_encrypted')
    op.drop_column('verified_documents', 'encryption_iv')
    op.drop_column('verified_documents', 'expiration_date')
    op.drop_column('verified_documents', 'updated_at')
    op.drop_column('verified_documents', 'document_hash')
    op.drop_column('verified_documents', 'encryption_salt')
    op.drop_column('verified_documents', 'user_id')
    op.drop_column('verified_documents', 'last_verification_attempt')
    op.drop_column('verified_documents', 'verification_attempts')
    op.drop_column('verified_documents', 'verification_date')
    op.drop_column('verified_documents', 'document_type')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('verified_documents', sa.Column('document_type', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('verified_documents', sa.Column('verification_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('verification_attempts', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('last_verification_attempt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('verified_documents', sa.Column('encryption_salt', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('verified_documents', sa.Column('document_hash', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('verified_documents', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('expiration_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('encryption_iv', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('verified_documents', sa.Column('metadata_encrypted', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('encryption_key', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('verified_documents', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('verification_score', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'verified_documents', type_='foreignkey')
    op.create_foreign_key('verified_documents_user_id_fkey', 'verified_documents', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_verified_documents_id'), table_name='verified_documents')
    op.drop_column('verified_documents', 'revoked_at')
    op.drop_column('verified_documents', 'revocation_reason')
    op.drop_column('verified_documents', 'valid_until')
    op.drop_column('verified_documents', 'verified_at')
    op.drop_column('verified_documents', 'verified_by')
    op.drop_column('verified_documents', 'verification_data')
    op.drop_column('verified_documents', 'document_id')
    op.add_column('verification_attempts', sa.Column('first_attempt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('block_expiration', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('last_attempt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('is_blocked', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('attempt_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'verification_attempts', type_='foreignkey')
    op.create_foreign_key('verification_attempts_user_id_fkey', 'verification_attempts', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_verification_attempts_id'), table_name='verification_attempts')
    op.alter_column('verification_attempts', 'ip_address',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('verification_attempts', 'created_at')
    op.drop_column('verification_attempts', 'user_agent')
    op.drop_column('verification_attempts', 'error_message')
    op.drop_column('verification_attempts', 'attempt_data')
    op.drop_column('verification_attempts', 'status')
    op.drop_column('verification_attempts', 'attempt_type')
    op.drop_column('verification_attempts', 'document_id')
    op.add_column('users', sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint('users_username_key', 'users', ['username'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.alter_column('users', 'hashed_password',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('user_sessions', sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('refresh_token', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_id'), table_name='user_sessions')
    op.create_unique_constraint('user_sessions_session_id_key', 'user_sessions', ['session_id'])
    op.drop_column('user_sessions', 'session_token')
    op.add_column('security_events', sa.Column('details', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('security_events', sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('security_events', sa.Column('severity', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('security_events', sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_security_events_id'), table_name='security_events')
    op.alter_column('security_events', 'event_type',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('security_events', 'created_at')
    op.drop_column('security_events', 'event_data')
    op.add_column('password_resets', sa.Column('token', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_password_resets_reset_token'), table_name='password_resets')
    op.drop_index(op.f('ix_password_resets_id'), table_name='password_resets')
    op.create_unique_constraint('password_resets_token_key', 'password_resets', ['token'])
    op.alter_column('password_resets', 'expires_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_column('password_resets', 'user_agent')
    op.drop_column('password_resets', 'ip_address')
    op.drop_column('password_resets', 'used_at')
    op.drop_column('password_resets', 'reset_token')
    op.add_column('failed_login_attempts', sa.Column('first_attempt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('failed_login_attempts', sa.Column('block_expiration', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('failed_login_attempts', sa.Column('last_attempt', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('failed_login_attempts', sa.Column('is_blocked', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('failed_login_attempts', sa.Column('attempt_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('failed_login_attempts', sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'failed_login_attempts', type_='foreignkey')
    op.drop_index(op.f('ix_failed_login_attempts_id'), table_name='failed_login_attempts')
    op.alter_column('failed_login_attempts', 'ip_address',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('failed_login_attempts', 'attempt_time')
    op.drop_column('failed_login_attempts', 'user_agent')
    op.drop_column('failed_login_attempts', 'user_id')
    op.add_column('document_audit_logs', sa.Column('details', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('document_audit_logs', sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('document_audit_logs', sa.Column('timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'document_audit_logs', type_='foreignkey')
    op.create_foreign_key('document_audit_logs_document_id_fkey', 'document_audit_logs', 'verified_documents', ['document_id'], ['id'])
    op.drop_index(op.f('ix_document_audit_logs_id'), table_name='document_audit_logs')
    op.alter_column('document_audit_logs', 'action',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_column('document_audit_logs', 'created_at')
    op.drop_column('document_audit_logs', 'action_data')
    op.drop_column('document_audit_logs', 'action_by')
    op.drop_index(op.f('ix_user_credentials_id'), table_name='user_credentials')
    op.drop_table('user_credentials')
    op.drop_index(op.f('ix_identity_documents_id'), table_name='identity_documents')
    op.drop_table('identity_documents')
    # ### end Alembic commands ###
