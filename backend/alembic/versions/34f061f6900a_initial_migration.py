"""Initial migration

Revision ID: 34f061f6900a
Revises: 8c4e950ed35c
Create Date: 2024-11-09 12:41:42.134506

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '34f061f6900a'
down_revision: Union[str, None] = '8c4e950ed35c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_jobs_id', table_name='jobs')
    op.drop_table('jobs')
    op.drop_index('ix_identity_documents_id', table_name='identity_documents')
    op.drop_table('identity_documents')
    op.drop_index('ix_job_applications_id', table_name='job_applications')
    op.drop_table('job_applications')
    op.add_column('document_audit_logs', sa.Column('details', sa.String(), nullable=True))
    op.drop_constraint('document_audit_logs_document_id_fkey', 'document_audit_logs', type_='foreignkey')
    op.create_foreign_key(None, 'document_audit_logs', 'verified_documents', ['document_id'], ['id'])
    op.drop_column('document_audit_logs', 'ip_address')
    op.drop_column('document_audit_logs', 'action_data')
    op.drop_column('document_audit_logs', 'action_by')
    op.drop_column('document_audit_logs', 'user_agent')
    op.add_column('failed_login_attempts', sa.Column('email', sa.String(), nullable=True))
    op.add_column('failed_login_attempts', sa.Column('attempt_count', sa.Integer(), nullable=True))
    op.add_column('failed_login_attempts', sa.Column('last_attempt', sa.DateTime(), nullable=True))
    op.create_index(op.f('ix_failed_login_attempts_email'), 'failed_login_attempts', ['email'], unique=False)
    op.drop_constraint('failed_login_attempts_user_id_fkey', 'failed_login_attempts', type_='foreignkey')
    op.drop_column('failed_login_attempts', 'ip_address')
    op.drop_column('failed_login_attempts', 'user_agent')
    op.drop_column('failed_login_attempts', 'user_id')
    op.drop_column('failed_login_attempts', 'attempt_time')
    op.add_column('password_resets', sa.Column('token', sa.String(), nullable=True))
    op.drop_index('ix_password_resets_reset_token', table_name='password_resets')
    op.create_unique_constraint(None, 'password_resets', ['token'])
    op.drop_column('password_resets', 'reset_token')
    op.drop_column('password_resets', 'ip_address')
    op.drop_column('password_resets', 'used_at')
    op.drop_column('password_resets', 'used')
    op.drop_column('password_resets', 'user_agent')
    op.add_column('security_events', sa.Column('description', sa.String(), nullable=True))
    op.drop_column('security_events', 'ip_address')
    op.drop_column('security_events', 'event_data')
    op.drop_column('security_events', 'user_agent')
    op.add_column('user_credentials', sa.Column('credential_type', sa.String(), nullable=True))
    op.add_column('user_credentials', sa.Column('credential_value', sa.String(), nullable=True))
    op.add_column('user_credentials', sa.Column('credential_metadata', sa.String(), nullable=True))
    op.add_column('user_credentials', sa.Column('expires_at', sa.DateTime(), nullable=True))
    op.drop_column('user_credentials', 'username')
    op.drop_column('user_credentials', 'encrypted_password')
    op.add_column('user_sessions', sa.Column('token', sa.String(), nullable=True))
    op.drop_index('ix_user_sessions_session_token', table_name='user_sessions')
    op.drop_column('user_sessions', 'last_activity')
    op.drop_column('user_sessions', 'user_agent')
    op.drop_column('user_sessions', 'session_token')
    op.drop_column('user_sessions', 'ip_address')
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'full_name')
    op.add_column('verification_attempts', sa.Column('attempt_status', sa.String(), nullable=True))
    op.alter_column('verification_attempts', 'error_message',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_constraint('verification_attempts_document_id_fkey', 'verification_attempts', type_='foreignkey')
    op.create_foreign_key(None, 'verification_attempts', 'verified_documents', ['document_id'], ['id'])
    op.drop_column('verification_attempts', 'ip_address')
    op.drop_column('verification_attempts', 'status')
    op.drop_column('verification_attempts', 'attempt_type')
    op.drop_column('verification_attempts', 'attempt_data')
    op.drop_column('verification_attempts', 'user_agent')
    op.add_column('verified_documents', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('verified_documents', sa.Column('document_type', sa.String(), nullable=True))
    op.add_column('verified_documents', sa.Column('document_number', sa.String(), nullable=True))
    op.add_column('verified_documents', sa.Column('verification_date', sa.DateTime(), nullable=True))
    op.add_column('verified_documents', sa.Column('expiry_date', sa.DateTime(), nullable=True))
    op.add_column('verified_documents', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.drop_constraint('verified_documents_document_id_fkey', 'verified_documents', type_='foreignkey')
    op.create_foreign_key(None, 'verified_documents', 'users', ['user_id'], ['id'])
    op.drop_column('verified_documents', 'valid_until')
    op.drop_column('verified_documents', 'revoked_at')
    op.drop_column('verified_documents', 'revocation_reason')
    op.drop_column('verified_documents', 'verification_method')
    op.drop_column('verified_documents', 'verified_by')
    op.drop_column('verified_documents', 'verification_data')
    op.drop_column('verified_documents', 'verified_at')
    op.drop_column('verified_documents', 'document_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('verified_documents', sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('verified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('verification_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('verified_by', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('verification_method', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('revocation_reason', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('revoked_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('verified_documents', sa.Column('valid_until', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'verified_documents', type_='foreignkey')
    op.create_foreign_key('verified_documents_document_id_fkey', 'verified_documents', 'identity_documents', ['document_id'], ['id'])
    op.drop_column('verified_documents', 'created_at')
    op.drop_column('verified_documents', 'expiry_date')
    op.drop_column('verified_documents', 'verification_date')
    op.drop_column('verified_documents', 'document_number')
    op.drop_column('verified_documents', 'document_type')
    op.drop_column('verified_documents', 'user_id')
    op.add_column('verification_attempts', sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('attempt_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('attempt_type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('verification_attempts', sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'verification_attempts', type_='foreignkey')
    op.create_foreign_key('verification_attempts_document_id_fkey', 'verification_attempts', 'identity_documents', ['document_id'], ['id'])
    op.alter_column('verification_attempts', 'error_message',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('verification_attempts', 'attempt_status')
    op.add_column('users', sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('session_token', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user_sessions', sa.Column('last_activity', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_index('ix_user_sessions_session_token', 'user_sessions', ['session_token'], unique=True)
    op.drop_column('user_sessions', 'token')
    op.add_column('user_credentials', sa.Column('encrypted_password', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('user_credentials', sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('user_credentials', 'expires_at')
    op.drop_column('user_credentials', 'credential_metadata')
    op.drop_column('user_credentials', 'credential_value')
    op.drop_column('user_credentials', 'credential_type')
    op.add_column('security_events', sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('security_events', sa.Column('event_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('security_events', sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('security_events', 'description')
    op.add_column('password_resets', sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('password_resets', sa.Column('used', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('password_resets', sa.Column('used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('password_resets', sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('password_resets', sa.Column('reset_token', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'password_resets', type_='unique')
    op.create_index('ix_password_resets_reset_token', 'password_resets', ['reset_token'], unique=True)
    op.drop_column('password_resets', 'token')
    op.add_column('failed_login_attempts', sa.Column('attempt_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('failed_login_attempts', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('failed_login_attempts', sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('failed_login_attempts', sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_foreign_key('failed_login_attempts_user_id_fkey', 'failed_login_attempts', 'users', ['user_id'], ['id'])
    op.drop_index(op.f('ix_failed_login_attempts_email'), table_name='failed_login_attempts')
    op.drop_column('failed_login_attempts', 'last_attempt')
    op.drop_column('failed_login_attempts', 'attempt_count')
    op.drop_column('failed_login_attempts', 'email')
    op.add_column('document_audit_logs', sa.Column('user_agent', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('document_audit_logs', sa.Column('action_by', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('document_audit_logs', sa.Column('action_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('document_audit_logs', sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'document_audit_logs', type_='foreignkey')
    op.create_foreign_key('document_audit_logs_document_id_fkey', 'document_audit_logs', 'identity_documents', ['document_id'], ['id'])
    op.drop_column('document_audit_logs', 'details')
    op.create_table('job_applications',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('job_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['job_id'], ['jobs.id'], name='job_applications_job_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='job_applications_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='job_applications_pkey')
    )
    op.create_index('ix_job_applications_id', 'job_applications', ['id'], unique=False)
    op.create_table('identity_documents',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('document_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('document_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verification_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('PENDING', 'VERIFIED', 'REJECTED', 'EXPIRED', 'REVOKED', name='documentstatus'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='identity_documents_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='identity_documents_pkey')
    )
    op.create_index('ix_identity_documents_id', 'identity_documents', ['id'], unique=False)
    op.create_table('jobs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('company', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('requirements', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='jobs_pkey')
    )
    op.create_index('ix_jobs_id', 'jobs', ['id'], unique=False)
    # ### end Alembic commands ###
